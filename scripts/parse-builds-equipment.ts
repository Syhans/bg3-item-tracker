// run once, redownload the CSV file from Google Sheets if needed, place in this directory as bg3-builds-equipment.csv and run with bun

import * as Papa from "papaparse";
import * as fs from "fs";

const data = fs.readFileSync("./scripts/bg3-builds-equipment.csv", "utf-8");
const rows = Papa.parse(data, { header: false }).data as string[][];

const itemsByBuild: Record<string, string[]> = {};
for (const [build, itemsString] of rows) {
  const items = itemsString.split(",").map((item) => item.trim());
  const buildName = build.trim();
  itemsByBuild[buildName] = items;
}

const buildsByItem: Record<string, string[]> = {};
for (const [build, items] of Object.entries(itemsByBuild)) {
  for (const item of items) {
    buildsByItem[item] ??= [];
    buildsByItem[item].push(build);
  }
}

fs.writeFileSync(
  "./src/data/bg3-builds-equipment.json",
  JSON.stringify(
    {
      itemsByBuild,
      buildsByItem,
    },
    null,
    2
  )
);
fs.writeFileSync(
  "./src/data/bg3-builds-equipment.min.json",
  JSON.stringify({
    itemsByBuild,
    buildsByItem,
  })
);

fs.writeFileSync(
  "./src/types/bg3-builds-equipment.ts",
  `// This file was generated by scripts/parse-builds-equipment.ts, DO NOT EDIT MANUALLY
export interface Bg3BuildsEquipment {
  itemsByBuild: Record<string, string[]>;
  buildsByItem: Record<string, string[]>;
}
`
);
